#include<iostream>
using namespace std;

class course
{
private:
    string courseName;
    string* students;
    int numberOfStudents;
    int capacity;

public:
    // Deep copy constructor
    course(const course& source);
    course(const string& courseName, int capacity);
    ~course();
    string getcourseName() const;
    void addStudent(const string& name);
    void dropStudent(const string& name);
    string* getStudents() const;
    int getNumberOfStudents() const;
};

// Implementation of deep copy constructor
course::course(const course& source)
{
    this->courseName = source.courseName;
    this->capacity = source.capacity;
    this->numberOfStudents = source.numberOfStudents;

    // Allocate new memory for students array
    this->students = new string[this->capacity];

    // Copy the contents of the source array to the new array
    for (int i = 0; i < this->numberOfStudents; i++)
    {
        this->students[i] = source.students[i];
    }
}

course::course(const string& courseName, int capacity)
{
    this->courseName = courseName;
    this->capacity = capacity;
    numberOfStudents = 0;
    students = new string[capacity];
}

course::~course()
{
    delete[] students;
}

string course::getcourseName() const
{
    return courseName;
}

void course::addStudent(const string& name)
{
    students[numberOfStudents] = name;
    numberOfStudents++;
}

void course::dropStudent(const string& name)
{
    for (int i = 0; i < numberOfStudents; i++)
    {
        if (students[i] == name)
        {
            // Found the student, remove them by shifting the remaining elements
            for (int j = i; j < numberOfStudents - 1; j++)
            {
                students[j] = students[j + 1];
            }
            numberOfStudents--;
            return; // Student found and dropped, exit the function
        }
    }

    // If the function reaches here, the student was not found
    cout << "Student " << name << " not found in the course.\n";
}

string* course::getStudents() const
{
    return students;
}

int course::getNumberOfStudents() const
{
    return numberOfStudents;
}

int main()
{
    // Testing deep copy constructor
    course course1("Data Structures", 10);
    course1.addStudent("Peter Jones");
    course1.addStudent("Brian Smith");

    course course3 = course1; // Deep copy using copy constructor
    course3.addStudent("John Doe");

    // Testing dropStudent()
    course1.dropStudent("Brian Smith");

    cout << "Number of students in course1: " << course1.getNumberOfStudents() << "\n";
    string* students = course1.getStudents();
    for (int i = 0; i < course1.getNumberOfStudents(); i++)
        cout << students[i] << ", ";

    cout << "\nNumber of students in course3: " << course3.getNumberOfStudents() << "\n";
    students = course3.getStudents();
    for (int i = 0; i < course3.getNumberOfStudents(); i++)
        cout << students[i] << ", ";

    return 0;
}
